stages:
  - build
  - deploy

############################################
################# CONFIG ###################
############################################

before_script:
  - | # export env file and copy routing table to pyalbert config
    if [[ -z $CI_ENVIRONMENT_NAME ]]; then
      echo "info: CI_ENVIRONMENT_NAME is empty, skip the export"
    else
      if [[ $CI_COMMIT_BRANCH = "staging" ]]; then
        echo "info: export staging env file of $CI_ENVIRONMENT_NAME environment"
        export $(grep -v "^#" $STAGING__ENV_FILE | xargs)
      elif [[ $CI_COMMIT_BRANCH = "main" ]]; then
        echo "info: export production env file of $CI_ENVIRONMENT_NAME environment"
        export $(grep -v "^#" $PROD__ENV_FILE | xargs)
      fi
    fi

config:clean gitlab runner:
  rules:
    - when: manual
      allow_failure: true  # to avoid blocked state
  stage: .pre
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker system prune -af --volumes
  
############################################
################## FRONT ###################
############################################

################## DINUM ###################

build:front:dinum:
  environment:
      name: dinum
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - | # build and push front image to gitlab registry
      docker login --username gitlab-ci-token --password $CI_JOB_TOKEN $CI_REGISTRY
      docker build --rm --file ./Dockerfile \
      --build-arg VITE_API_URL=${CI_DEPLOY_URL} \
      --build-arg VITE_ENVIRONMENT_NAME=${CI_ENVIRONMENT_NAME} \
      --build-arg VITE_MODEL_NAME=${MODEL_NAME} \
      --build-arg VITE_MODEL_MODE=${MODEL_MODE} \
      --build-arg VITE_MATOMO_URL=${MATOMO_URL} \
      --tag ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH} .
      docker push ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH}

deploy:front:dinum:
  environment:
    name: dinum
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: deploy
  image: alpine:latest
  script:
    - | # ssh connection setup
      chmod og= $CI_DEPLOY_USER_SSH_PRIVATE_KEY
      apk update
      apk add openssh-client
    - |
      ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
      docker container rm -f ${CI_ENVIRONMENT_NAME}-front || true
      docker image rm ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH} || true
      docker run --restart always --detach --publish 4174:4173 --name ${CI_ENVIRONMENT_NAME}-front ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH}
      "

############# FRANCE SERVICES ##############

build:front:france services:
  environment:
      name: franceservices
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - | # build and push front image to gitlab registry
      docker login --username gitlab-ci-token --password $CI_JOB_TOKEN $CI_REGISTRY
      docker build --rm --file ./Dockerfile \
      --build-arg VITE_API_URL=${CI_DEPLOY_URL} \
      --build-arg VITE_ENVIRONMENT_NAME=${CI_ENVIRONMENT_NAME} \
      --build-arg VITE_MODEL_NAME=${MODEL_NAME} \
      --build-arg VITE_MODEL_MODE=${MODEL_MODE} \
      --build-arg VITE_MATOMO_URL=${MATOMO_URL} \
      --tag ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH} .
      docker push ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH}

deploy:front:france services:
  environment:
    name: franceservices
  rules:
    - if: $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: true  # to avoid blocked state
  stage: deploy
  image: alpine:latest
  script:
    - | # ssh connection setup
      chmod og= $CI_DEPLOY_USER_SSH_PRIVATE_KEY
      apk update
      apk add openssh-client
    - |
      ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "
      docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
      docker container rm -f ${CI_ENVIRONMENT_NAME}-front || true
      docker image rm ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH} || true
      docker run --restart always --detach --publish 4174:4173 --name ${CI_ENVIRONMENT_NAME}-front ${CI_REGISTRY_IMAGE}/front/${CI_ENVIRONMENT_NAME}:${CI_FRONT_IMAGE_TAG}-${CI_COMMIT_BRANCH}
      "